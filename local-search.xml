<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/11/15/JSON%E8%BD%AC%E6%8D%A2%E7%B1%BB/"/>
    <url>/2020/11/15/JSON%E8%BD%AC%E6%8D%A2%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>#JSON转换类</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2> <pre><code class="hljs pom">&lt;!--    Jackson Json处理工具包--&gt;            &lt;dependency&gt;                &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;                &lt;version&gt;$&#123;jackson.version&#125;&lt;&#x2F;version&gt;            &lt;&#x2F;dependency&gt; &lt;jackson.version&gt;2.4.2&lt;&#x2F;jackson.version&gt;</code></pre><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.commons;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.JavaType;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-comment">/**</span><span class="hljs-comment"> * JSON转换工具类</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonUtils</span> </span>&#123;    <span class="hljs-comment">// 定义jackson对象</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ObjectMapper MAPPER = <span class="hljs-keyword">new</span> ObjectMapper();    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 将对象转换成json字符串。</span><span class="hljs-comment">     * &lt;p&gt;Title: pojoToJson&lt;/p&gt;</span><span class="hljs-comment">     * &lt;p&gt;Description: &lt;/p&gt;</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">objectToJson</span><span class="hljs-params">(Object data)</span> </span>&#123;    <span class="hljs-keyword">try</span> &#123;String string = MAPPER.writeValueAsString(data);<span class="hljs-keyword">return</span> string;&#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;e.printStackTrace();&#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">     * 将json结果集转化为对象</span><span class="hljs-comment">     * </span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jsonData json数据</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz 对象中的object类型</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">jsonToPojo</span><span class="hljs-params">(String jsonData, Class&lt;T&gt; beanType)</span> </span>&#123;        <span class="hljs-keyword">try</span> &#123;            T t = MAPPER.readValue(jsonData, beanType);            <span class="hljs-keyword">return</span> t;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;        e.printStackTrace();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">     * 将json数据转换成pojo对象list</span><span class="hljs-comment">     * &lt;p&gt;Title: jsonToList&lt;/p&gt;</span><span class="hljs-comment">     * &lt;p&gt;Description: &lt;/p&gt;</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jsonData</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanType</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt;<span class="hljs-function">List&lt;T&gt; <span class="hljs-title">jsonToList</span><span class="hljs-params">(String jsonData, Class&lt;T&gt; beanType)</span> </span>&#123;    JavaType javaType = MAPPER.getTypeFactory().constructParametricType(List.class, beanType);    <span class="hljs-keyword">try</span> &#123;    List&lt;T&gt; list = MAPPER.readValue(jsonData, javaType);    <span class="hljs-keyword">return</span> list;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    &#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="/2020/11/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/2020/11/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><hr><p>参考文献</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/11/14/hello-world/"/>
    <url>/2020/11/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
